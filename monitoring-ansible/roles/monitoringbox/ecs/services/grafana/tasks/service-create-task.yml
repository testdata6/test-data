# Include variable and secrets based on type of environment
# all is available across
- include_vars: ../../../../../../group_vars/vault.yml
  no_log: false
  when: env_ver == "new-vpc"
- include_vars: ../../../../../../group_vars/vault.yml
  no_log: false
  when: env_ver == "existing-vpc"

## Varibale for New vpc ( Dio and Marvel Project)
- include_vars: ../../../../../../group_vars/Dio/new-vpc.yml
  no_log: false
  when: env_ver == "new-vpc" and project == "dio"

- include_vars: ../../../../../../group_vars/Marvel/new-vpc.yml
  no_log: false
  when: env_ver == "new-vpc" and project == "marvel"

## Varibale for Existing vpc ( Dio and Marvel Project)

- include_vars: ../../../../../../group_vars/Dio/existing-vpc.yml
  no_log: false
  when: env_ver == "existing-vpc" and project == "dio"

- include_vars: ../../../../../../group_vars/Marvel/existing-vpc.yml
  no_log: false
  when: env_ver == "existing-vpc" and project == "marvel"



# Create VPC for Monitoing Box
- name: Grafana
  cloudformation:
    stack_name: "{{stack_prefix}}-grafana"
    state: "present"
    region: "{{cluster_region}}"
    disable_rollback: false
    template_format: yaml
    validate_certs: no
    template: "{{ role_path }}/ecs/services/grafana/template/service.yaml"
    #Capabilities.member.N: yes
    #role_arn: arn:aws:iam::939393939339:role/monitoring
    template_parameters:
      VPC: "{{vpc_id}}"
      Cluster: "{{cluster}}"
      Listener: "{{listener}}"
      Grafanaurl: "{{grafana_url}}"
      ECSServiceAutoScalingRoleARN: "{{ecsserviceautoscalingrole}}"
      GrafanaSourceVolume: "{{grafana_volume}}"
      GrafanaContainerPath: "{{grafana_volume_path}}"
      GrafanaSourcePath: "{{grafana_volume_source_path}}"
      GrafanaPassword: "{{grafana_admin_pass}}"
      GrafanaDBhost: "{{grafana_db_host}}"
      GrafanaDBUser: "{{grafana_db_user}}"
      GrafanaDBPass: "{{grafana_db_pass}}"
      GrafanaDBName: "{{grafana_db_name}}"
      GrafanaSmtphost: "{{grafana_smtp_host}}"
      Grafanahost: "{{grafana_url}}"
      GrafanaCpu: "{{grafana_cpu}}"
      GrafanaMemory: "{{grafana_mem}}"
      GrafanaImage: "{{grafana_image}}"

    tags:
      Stack: "{{stack_name}}"
  register: grafana_stack
