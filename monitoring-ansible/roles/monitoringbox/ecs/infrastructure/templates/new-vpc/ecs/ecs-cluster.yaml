Description: >
    This template deploys an ECS cluster to the provided VPC and subnets
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType:
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: c4.large

    ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 4
    KeyName:
        Description: 'Optional key pair of the ec2-user to establish a SSH connection to the EC2 instances of the ECS cluster.'
        Type: AWS::EC2::KeyPair::KeyName
        Default: monitoring-box

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id
    EbsVolume:
        Description: EBS Volume for this ECS cluster?
        Type: String
    Region:
        Description: Region for the ECS cluster?
        Type: String
    ElasticIP:
        Description: ElasticIP for the ECS cluster Node?
        Type: String

Mappings:

    AWSRegionToAMI:
        us-east-2:
            AMI: ami-67ab9e02
        us-east-1:
            AMI: ami-5e414e24
        us-west-2:
            AMI: ami-b523becd
        us-west-1:
            AMI: ami-7c27101c
        eu-west-3:
            AMI: ami-6fa21412
        eu-west-2:
            AMI: ami-42a64325
        eu-west-1:
            AMI: ami-880d64f1
        eu-central-1:
            AMI: ami-63cbae0c
        ap-northeast-2:
            AMI: ami-0acc6e64
        ap-northeast-1:
            AMI: ami-e3166185
        ap-southeast-2:
            AMI: ami-36867d54
        ap-southeast-1:
            AMI: ami-b00304cc
        ca-central-1:
            AMI: ami-4b9c182f
        ap-south-1:
            AMI: ami-ca8ad9a5
        sa-east-1:
            AMI: ami-69f7b805

Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref ClusterSize
            MaxSize: !Ref ClusterSize
            DesiredCapacity: !Ref ClusterSize
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName}-Server
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal:
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                SuspendProcesses:
                  - HealthCheck
                  - ReplaceUnhealthy
                  - AZRebalance
                  - AlarmNotification
                  - ScheduledActions
                WaitOnResourceSignals: true

    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            KeyName: !Ref KeyName
            SecurityGroups:
                - !Ref SecurityGroup
            IamInstanceProfile: !Ref ECSInstanceProfile
            UserData:
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
                    yum install -y aws-cfn-bootstrap
                    MOUNT_NAME="monitoringbox-data"
                    echo "/dev/xvdf /$MOUNT_NAME auto noatime 0 0" | sudo tee -a /etc/fstab
                    instance=$(curl -s http://instance-data/latest/meta-data/instance-id)
                    mkdir -m 000 /$MOUNT_NAME
                    echo "aws ec2 attach-volume --volume-id ${EbsVolume} --instance-id $instance --device /dev/sdf --region ${Region} > /dev/null 2>&1 "| sudo tee -a /etc/rc.local
                    echo "sleep 2" | sudo tee -a /etc/rc.local
                    echo "aws ec2 associate-address --instance-id $instance --allocation-id  ${ElasticIP} --region ${Region}   > /dev/null 2>&1" | sudo tee -a /etc/rc.local
                    echo "sleep 5" | sudo tee -a /etc/rc.local
                    echo "mount -a"| sudo tee -a /etc/rc.local
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

        Metadata:
            AWS::CloudFormation::Init:
                config:
                    packages:
                        yum:
                            awslogs: []

                    commands:
                        01_add_instance_to_cluster:
                            command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                    files:
                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}

                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

                        "/etc/awslogs/awscli.conf":
                            content: !Sub |
                                [plugins]
                                cwlogs = cwlogs
                                [default]
                                region = ${AWS::Region}

                        "/etc/awslogs/awslogs.conf":
                            content: !Sub |
                                [general]
                                state_file = /var/lib/awslogs/agent-state

                                [/var/log/dmesg]
                                file = /var/log/dmesg
                                log_group_name = ${ECSCluster}-/var/log/dmesg
                                log_stream_name = ${ECSCluster}

                                [/var/log/messages]
                                file = /var/log/messages
                                log_group_name = ${ECSCluster}-/var/log/messages
                                log_stream_name = ${ECSCluster}
                                datetime_format = %b %d %H:%M:%S

                                [/var/log/docker]
                                file = /var/log/docker
                                log_group_name = ${ECSCluster}-/var/log/docker
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%S.%f

                                [/var/log/ecs/ecs-init.log]
                                file = /var/log/ecs/ecs-init.log.*
                                log_group_name = ${ECSCluster}-/var/log/ecs/ecs-init.log
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%SZ

                                [/var/log/ecs/ecs-agent.log]
                                file = /var/log/ecs/ecs-agent.log.*
                                log_group_name = ${ECSCluster}-/var/log/ecs/ecs-agent.log
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%SZ

                                [/var/log/ecs/audit.log]
                                file = /var/log/ecs/audit.log.*
                                log_group_name = ${ECSCluster}-/var/log/ecs/audit.log
                                log_stream_name = ${ECSCluster}
                                datetime_format = %Y-%m-%dT%H:%M:%SZ

                    services:
                        sysvinit:
                            cfn-hup:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                            awslogs:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/awslogs/awslogs.conf
                                    - /etc/awslogs/awscli.conf

    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": "*",
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref ECSRole

    ECSServiceAutoScalingRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    Action:
                    - 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                        Service:
                        - application-autoscaling.amazonaws.com
            Path: /
            Policies:
            - PolicyName: ecs-service-autoscaling
              PolicyDocument:
                  Statement:
                      Effect: Allow
                      Action:
                      - application-autoscaling:*
                      - cloudwatch:DescribeAlarms
                      - cloudwatch:PutMetricAlarm
                      - ecs:DescribeServices
                      - ecs:UpdateService
                      Resource: "*"

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster

    ECSServiceAutoScalingRole:
        Description: A reference to ECS service auto scaling role
        Value: !GetAtt ECSServiceAutoScalingRole.Arn
