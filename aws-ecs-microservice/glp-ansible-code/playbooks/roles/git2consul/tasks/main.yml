---

#######Sample command for stage env##############
# ansible-playbook -i hosts/ec2.py playbooks/git2consul.yml --extra-vars "env=stage region=us-east-1 consul_tag=consul service_name=git2consul cluster_name=git2consul-Cluster-Stage  ecs_action=update count=4 "
#################################################


# Variables file will be selected based on extra-var argument env
- include_vars: ../git2consul/defaults/{{env}}.yml


# All scripts are generated and executed from localhost. Ensure required
# dependencies are met
- name: Generate ecs-task def template
  template: >
     src=git2consul-task-def.j2
     dest=/tmp/git2consul-task-def.yaml


# ------------Service management------------------------#
# Create task definition only but do not create service
- name: Deploy git2consul service
  script: ../files/orchestrate.py -v -e "{{env}}" -r "{{region}}" -f /tmp/git2consul-task-def.yaml --task
  when: ecs_action == "task"
  register: task_creation

- debug: var=task_creation.stdout_lines
  when: ecs_action == "task"

# Update task definition and create service. Ensures that service uses tasks created from ansible only
- name: Create service
  script: ../files/orchestrate.py -v -e "{{env}}" -r "{{region}}" -f /tmp/git2consul-task-def.yaml --create
  when: ecs_action == "create"
  register: service_creation

- debug: var=service_creation.stdout_lines
  when: ecs_action == "create"

# Update service with new code but without increasing or decreasing the count
- name: Update service without count
  script: ../files/orchestrate.py -v -e "{{env}}" -r "{{region}}" -f /tmp/git2consul-task-def.yaml --update
  when: ecs_action == "update" and update_consul_master_count is not defined
  register: service_update_without_count

- debug: var=service_update_without_count.stdout_lines
  when: ecs_action == "update" and update_consul_master_count is not defined

# Update service with the specified count. Ensure count to use is set from update_consul_master_count
# by passing it as extra-var
- name: Update service with specified count
  script: ../files/orchestrate.py -v -e "{{env}}" -r "{{region}}" -c "{{update_consul_master_count}}" -f /tmp/git2consul-task-def.yaml --update
  when: ecs_action == "update" and update_consul_master_count is defined
  register: service_update_with_count

- debug: var=service_update_with_count.stdout_lines
  when: ecs_action == "update" and update_consul_master_count is defined


# CAUTION:
# There are no checks to ensure to if service should be deleted as this would be called by terraform
- name: Delete service
  script: ../files/orchestrate.py -v -e "{{env}}" -r "{{region}}" -f /tmp/git2consul-task-def.yaml -c 0 --update
  when: ecs_action == "delete"
  register: service_update_before_delete

- debug: var=service_update_before_delete.stdout_lines
  when: ecs_action == "delete"

- name: Delete service
  script: ../files/orchestrate.py -v -e "{{env}}" -r "{{region}}" -f /tmp/git2consul-task-def.yaml --delete
  when: ecs_action == "delete"
  register: service_delete

- debug: var=service_delete.stdout_lines
  when: ecs_action == "delete"
